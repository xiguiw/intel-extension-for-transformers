:orphan:

:py:mod:`model`
===============

.. py:module:: model


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   model.TritonPythonModel




.. py:class:: TritonPythonModel


   Your Python model must use the same class name. Every Python model
   that is created must have "TritonPythonModel" as the class name.

   .. py:method:: initialize(args)

      `initialize` is called only once when the model is being loaded.
      Implementing `initialize` function is optional. This function allows
      the model to initialize any state associated with this model.

      :param args: Both keys and values are strings. The dictionary keys and values are:
                   * model_config: A JSON string containing the model configuration
                   * model_instance_kind: A string containing model instance kind
                   * model_instance_device_id: A string containing model instance device ID
                   * model_repository: Model repository path
                   * model_version: Model version
                   * model_name: Model name
      :type args: dict


   .. py:method:: execute(requests)

      `execute` MUST be implemented in every Python model. `execute`
      function receives a list of pb_utils.InferenceRequest as the only
      argument. This function is called when an inference request is made
      for this model. Depending on the batching configuration (e.g. Dynamic
      Batching) used, `requests` may contain multiple requests. Every
      Python model, must create one pb_utils.InferenceResponse for every
      pb_utils.InferenceRequest in `requests`. If there is an error, you can
      set the error argument when creating a pb_utils.InferenceResponse

      :param requests: A list of pb_utils.InferenceRequest
      :type requests: list

      :returns: A list of pb_utils.InferenceResponse. The length of this list must
                be the same as `requests`
      :rtype: list


   .. py:method:: finalize()

      `finalize` is called only once when the model is being unloaded.
      Implementing `finalize` function is OPTIONAL. This function allows
      the model to perform any necessary clean ups before exit.



